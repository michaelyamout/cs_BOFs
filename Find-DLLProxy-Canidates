#include "beacon.h"

void go(char* args, int len) {

    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnapshot == INVALID_HANDLE_VALUE) {
        BeaconPrintf(CALLBACK_ERROR, "Failed to create snapshot: %lu\n", GetLastError());
        return;
    }

    PROCESSENTRY32 pe32;
    pe32.dwSize = sizeof(PROCESSENTRY32);

    if (!Process32First(hSnapshot, &pe32)) {
        BeaconPrintf(CALLBACK_ERROR, "Failed to get first process: %lu\n", GetLastError());
        CloseHandle(hSnapshot);
        return;
    }

    do {
        HANDLE hModuleSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, pe32.th32ProcessID);
        if (hModuleSnap == INVALID_HANDLE_VALUE) {
            BeaconPrintf(CALLBACK_ERROR, "Failed to create module snapshot: %lu\n", GetLastError());
            continue;
        }

        MODULEENTRY32 me32;
        me32.dwSize = sizeof(MODULEENTRY32);

        if (!Module32First(hModuleSnap, &me32)) {
            BeaconPrintf(CALLBACK_ERROR, "Failed to get first module: %lu\n", GetLastError());
            CloseHandle(hModuleSnap);
            continue;
        }

        do {
            if (GetLastError() == ERROR_PARTIAL_COPY) {
                BeaconPrintf(CALLBACK_ERROR, "Failed to read module: ERROR_PARTIAL_COPY\n");
                break;
            }

            if (strstr(me32.szExePath, ".dll") != NULL) {
                if (GetFileAttributesA(me32.szExePath) == INVALID_FILE_ATTRIBUTES) {
                    BeaconPrintf(CALLBACK_OUTPUT, "[PID: %d] Suspicious DLL: %s\n", pe32.th32ProcessID, me32.szExePath);
                }
            }
        } while (Module32Next(hModuleSnap, &me32));

        CloseHandle(hModuleSnap);

    } while (Process32Next(hSnapshot, &pe32));

    CloseHandle(hSnapshot);
}
